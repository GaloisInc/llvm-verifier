// Copyright (c) 2001-2007 Galois, Inc.
//

//---------------------------------------------------------
// Rijndael block cipher

// API

blockEncrypt (Key, PT) = join (reverse (Rijndael (Key', PT')))
  where {
    Key' = reverse (split Key);
    PT' = reverse (split PT);
  };

blockDecrypt (Key, PT) = join (reverse (InvRijndael (Key', PT')))
  where {
    Key' = reverse (split Key);
    PT' = reverse (split PT);
  };

// Instantiations

AES128 : Cipher (128, 128);
AES128 = { encrypt = blockEncrypt; decrypt = blockDecrypt; };
AES192 : Cipher (192, 128);
AES192 = { encrypt = blockEncrypt; decrypt = blockDecrypt; };
AES256 : Cipher (256, 128);
AES256 = { encrypt = blockEncrypt; decrypt = blockDecrypt; };

// Testing

//include "aes128_128test.cry";
//include "aes192_128test.cry";
//include "aes256_128test.cry";

//---------------------------------------------------------
// Interface to AES test suite

//---------------------------------------------------------
// Note that keySchedule requires phantom
// parameterization of keySchedule, since the expanded
// key depends on the size of the block

keySchedule :  {nk nb c} (Nrows*nk >= 1,
			  6 >= width(Nrows*nk),
			  8 >= width(Nrows*nb),
			  6 >= width (4*((4*nk+3)/4)),
			  4*((4*nk+3)/4) >= 4*nk,
			  (4*nk+3)/4 >= 1)
		      => ([Nrows*nk][8], [Nrows*nb]c) ->
		         ([Nrows][nb][8],
			  [5+max(nb,nk)][Nrows][nb][8],
			  [Nrows][nb][8]);
keySchedule (Key, PT) = (xKeys @ 0, xKeys @@ [1 .. (Nr-1)], xKeys @ Nr)
  where {
    Nb, Nk : [8];
    Nb = width PT / Nrows;
    Nk = width Key / Nrows;
    Nr = max(Nb, Nk) + 6;
    W : [(Nr+1)*Nb][Nrows][8];
    W = take ((Nr+1)*Nb, keyExpansion (pad4 Key));
    xKeys : [Nr+1][Nrows][Nb][8];
    xKeys = [| transpose ws || ws <- split W |];
  };

// pad on the right with zero's if not a multiple of 4
pad4 : {b} (fin b,4*((b+3)/4) >= b) => [b][8] -> [4*((b+3)/4)][8];
pad4 k = k # zero;

encrypt :  {a nb} (8 >= width(Nrows*nb)) =>
           (([Nrows][nb][8], [a][Nrows][nb][8], [Nrows][nb][8]),
	    [Nrows*nb][8]) -> [Nrows*nb][8];
encrypt (KeyX, PT) = unstripe (RijndaelRounds (State, KeyX))
  where {
    // Nb is the number of columns in the `State'
    Nb : [8];
    Nb = width PT / Nrows;
    State : [Nrows][Nb][8];
    State = stripe PT;
  };

decrypt :  {a nb} (fin a, 8 >= width(Nrows*nb)) =>
           (([Nrows][nb][8], [a][Nrows][nb][8], [Nrows][nb][8]),
	    [Nrows*nb][8]) -> [Nrows*nb][8];
decrypt (KeyX, CT) = unstripe (InvRijndaelRounds (State, KeyX))
  where {
    Nb : [8];
    Nb = width CT / Nrows;
    State : [Nrows][Nb][8];
    State = stripe CT;
  };


//---------------------------------------------------------
// Constants

// Nrows is the # of rows in the `State' and key
// Brow is the # of bits per row
Nrows, Brow : [8];
Nrows = 4;
Brow = Nrows * 8;

//---------------------------------------------------------
// Key expansion

keyExpansion : {nk} (nk >= 1, 6 >= width(Nrows*nk)) =>
                    [Nrows*nk][8] -> [inf][Nrows][8];
keyExpansion key = W
  where {
    // the size of Nk is constrained by, e.g., the width of the sbox
    Nk : [8];
    Nk = width key / Nrows;
    keyCols : [Nk][Nrows][8];
    keyCols = split key;
    W : [inf][4][8];
    W = keyCols # [| nextPoly (Nk, i, x, y)
		  || i <- [Nk ..]
		  || x <- W
		  || y <- drop (Nk-1, W)
		  |];
  };

nextPoly : ([8], [8], [4][8], [4][8]) -> [4][8];
nextPoly (nk, i, old, prev) = old ^ prev'
  where prev' = if i % nk == 0 then
		    subByte (prev <<< 1) ^ Rcon (i / nk)
		else if (nk > 6) & (i % nk == 4) then
		    subByte prev
		else prev;

subByte p = [| sbox x || x <- p |];

Rcon i = [(xs @ (i - 1)) 0 0 0]
  where xs = [1] # [| gtimes1B (x, 2) || x <- xs |];

//---------------------------------------------------------
// Rijndael

Rijndael (Key, PT) = encrypt (xKey, PT)
  where xKey = keySchedule (Key, PT);
InvRijndael (Key, CT) = decrypt (xKey, CT)
  where xKey = keySchedule (Key, CT);

stripe : {a} [4*a][8] -> [4][a][8];
stripe block = transpose (split block);

unstripe : {a} [4][a][8] -> [4*a][8];
unstripe state = join (transpose state);

//---------------------------------------------------------
// Rijndael rounds

RijndaelRounds (State, (initialKey, roundKeys, finalKey)) = final
  where {
    istate = State ^ initialKey;
    rounds = [istate] # [| Round (state, key)
			|| state <- rounds
			|| key <- roundKeys |];
    final = FinalRound (last rounds, finalKey);
  };

InvRijndaelRounds (State, (initialKey, roundKeys, finalKey)) = final
  where {
    // can do this in InvKeyExpand
    invRoundKeys = [| InvMixColumn k || k <- reverse roundKeys |];
    istate = State ^ finalKey;
    rounds = [istate] # [| InvRound (state, key)
			|| state <- rounds
			|| key <- invRoundKeys |];
    final = InvFinalRound (last rounds, initialKey);
  };

last xs = xs @ (width xs - 1);

//---------------------------------------------------------
// Round functions

Round (State, RoundKey) = State3 ^ RoundKey
  where {
    State1 = ByteSub State;
    State2 = ShiftRow State1;
    State3 = MixColumn State2;
  };

InvRound (State, RoundKey) = State3 ^ RoundKey
  where {
    State1 = InvByteSub State;
    State2 = InvShiftRow State1;
    State3 = InvMixColumn State2;
  };

FinalRound (State, RoundKey) = State2 ^ RoundKey
  where {
    State1 = ByteSub State;
    State2 = ShiftRow State1;
  };

InvFinalRound (State, RoundKey) = State2 ^ RoundKey
  where {
    State1 = InvByteSub State;
    State2 = InvShiftRow State1;
  };

//---------------------------------------------------------
// ByteSub

ByteSub : {a} [4][a][8] -> [4][a][8];
ByteSub state = [| [| sbox x || x <- row |] || row <- state |];

InvByteSub : {a} [4][a][8] -> [4][a][8];
InvByteSub state = [| [| sibox x || x <- row |] || row <- state |];

//---------------------------------------------------------
// ShiftRow

ShiftRow : {nb} (fin nb) => [4][nb][8] -> [4][nb][8];
ShiftRow state =
  [| row <<< i
  || row <- state
  || i <- ShiftRowOffsets Nb |]
  where Nb = width(state@0);

InvShiftRow : {nb} fin nb => [4][nb][8] -> [4][nb][8];
InvShiftRow state =
  [| row >>> i
  || row <- state
  || i <- ShiftRowOffsets Nb |]
  where Nb = width(state@0);

ShiftRowOffsets Nb =
	if (Nb == 4) | (Nb == 5) | (Nb == 6) then [0 1 2 3]
	else if Nb == 7                      then [0 1 2 4]
	else if Nb == 8                      then [0 1 3 4]
	else error "ShiftRowOffsets: invalid value for Nb";

//---------------------------------------------------------
// MixColumn

MixColumn : {a} [4][a][8] -> [4][a][8];
MixColumn state    = transpose [| multCol (cx, col) || col <- transpose state |];

InvMixColumn : {a} [4][a][8] -> [4][a][8];
InvMixColumn state = transpose [| multCol (dx, col) || col <- transpose state |];

cx = polyMat [ 0x02 0x01 0x01 0x03 ];
dx = polyMat [ 0x0e 0x09 0x0d 0x0b ];

polyMat coeff = transpose (cols @@ [0 .. (width coeff - 1)])
  where cols = [coeff] # [| cs >>> 1 || cs <- cols |];

multCol (cx, col) = join (mmult (cx, split col));

//---------------------------------------------------------
// Sbox

/*
sbox : [8] -> [8];
sbox x = affine (inverts1B @ x);
*/

sbox : [8] -> [8];
sbox x = sbox1B @ x;
sbox1B = [| affine (inverts1B @ x) || x <- [0 .. 255] |];

sibox : [8] -> [8];
sibox x = inverts1B @ (affine' x);

affine : [8] -> [8];
affine xs = join (mmultBit (affMat, split xs)) ^ 0x63;
affine' : [8] -> [8];
affine' xs = join (mmultBit (affMat', split (xs ^ 0x63)));

affMat  = [ 0xf1 ] # [| x <<< 1 || x <- affMat  || i <- [1 .. 7] |];
affMat' = [ 0xa4 ] # [| x <<< 1 || x <- affMat' || i <- [1 .. 7] |];

//---------------------------------------------------------
// Galois field 2^8

// irred     = 0x1b;
// generator = 3;
// gtimes1B (x, y) = gtimes (logs1B, antilogs1B, x, y);
poly = <| x^8 + x^4 + x^3 + x + 1 |>;
gtimes1B : ([8], [8]) -> [8];
gtimes1B (x, y) = pmod (pmult (x, y), poly);

logs1B = logs antilogs1B;
antilogs1B = antilogs 3;
inverts1B = inverts (logs1B, antilogs1B);

// the reference implementation
rtimes : ([8], [8]) -> [8];
rtimes (x, y) = pmod (pmult (x, y), poly);

gtimes : ([256][9], [510][8], [8], [8]) -> [8];
gtimes (logs, antilogs, a, b)
  = if (a == 0) | (b == 0)
    then 0
    else antilogs @ (a' + b')
  where {
    a' = logs @ a;
    b' = logs @ b;
  };

gtable generator =
    [| rtimes (generator, x) || x <- [ 0 .. 255 ] |];

// export antilogs;
antilogs generator = antilogs8 # antilogs8
  where {
    gtab = gtable generator;
    antilogs8 = [1] # [| gtab @ x
		      || x <- antilogs8
		      || i <- [ 0 .. 253 ] |];
  };

// export logs;
logs antilogs
    = [0] # [| findLog (antilogs, x, 0) || x <- [ 1 .. 255 ] |];

inverts : ([256][9], [510][8]) -> [256][8];
inverts (logs, antilogs)
    = [0 1] # [| antilogs @ (255 - logs @ n)
	      || n <- [ 2 .. 255 ] |];

findLog : ([510][8], [8], [9]) -> [9];
findLog (antilogs, x, i)
  = if i <= 255 then
	if x == antilogs @ i then
	    i
	else
	    findLog (antilogs, x, i + 1)
    else
	error "No log?!";

// Matrix multiplication (in Galois Field 2^8)

mmult : {a b c} ([a][b][8], [b][c][8]) -> [a][c][8];
mmult (xss, yss)
  = [| [| dot (row, col) || col <- transpose yss |] || row <- xss |];

dot (as, bs) = sum [| gtimes1B (a, b) || a <- as || b <- bs |];

sum xs
  = sums @ width xs
  where sums = [0] # [| x ^ y || x <- xs || y <- sums |];

// Special case for matrix of bits (sigh ...)

mmultBit : {a b} ([a][8], [8][b]) -> [a][b];
mmultBit (xss, yss)
  = [| [| dotBit (row, col) || col <- transpose yss |] || row <- xss |];

dotBit : ([8], [8]) -> Bit;
dotBit (as, bs) = parity [| a & b || a <- as || b <- bs |];
