import "AES.cry";

let {{
  aesExtract x = aesEncrypt (pt,key)
    // Split into 32-bit blocks, reverse the blocks,
    // and finally join into two 128-bit blocks.
    //
    // This input transform is specific to the SAW backend.
    // See ':/intTests/test0017_lss_aig' for discussion of
    // the IO encodings for different backends.
    where [pt,key] = split (join (reverse (groupBy`{32} x)))
}};

let main = do {
  print "Loading LLVM implementation";
  f <- load_aig "aes.aig";

  print "Bitblasting Cryptol implementation";
  g <- bitblast {{ aesExtract }};

  print "Checking equivalence";
  res <- cec f g;
  print res;

  write_aig "aes-ref.aig" {{ aesExtract }};
};
