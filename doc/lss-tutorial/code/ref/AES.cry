// Copyright (c) 2004-2007 Galois, Inc.
//

//---------------------------------------------------------
// AES block cipher - specialized 128-bit version

Nb = 128 / 32;
Nk = 128 / 32;
Nr = max(Nb, Nk) + 6;

// API

AES128 : Cipher (128, 128);
AES128 = {
    encrypt (Key, PT) = join (reverse (aes (Key', PT')))
      where {
	Key' = reverse (split Key);
	PT' = reverse (split PT);
      };

    decrypt (Key, PT) = join (reverse (sea (Key', PT')))
      where {
	Key' = reverse (split Key);
	PT' = reverse (split PT);
      };
};

// Tests

// note, this also includes the API for `Cipher' used above
//include "aes128_128test.cry";

// helper for converting the state array into a 128-bit word
// for comparison with published intermediate test vectors

toW128 : [4][Nb][8] -> [32*Nb];
toW128 state = join (reverse (unstripe state));

// top-level cipher definition

aes : ([4*Nk][8], [4*Nb][8]) -> [4*Nb][8];
aes (Key, PT) = encrypt (xkey, PT)
  where xkey = keySchedule Key;

sea : ([4*Nk][8], [4*Nb][8]) -> [4*Nb][8];
sea (Key, CT) = decrypt (xkey, CT)
  where xkey = keySchedule Key;

encrypt (XK, PT) = unstripe (Rounds (State, XK))
  where {
    State : [4][Nb][8];
    State = stripe PT;
  };

decrypt (XK, PT) = unstripe (InvRounds (State, XK))
  where {
    State : [4][Nb][8];
    State = stripe PT;
  };

stripe : [4*Nb][8] -> [4][Nb][8];
stripe block = transpose (split block);

unstripe : [4][Nb][8] -> [4*Nb][8];
unstripe state = join (transpose state);

// The AES Rounds

Rounds (State, (initialKey, rndKeys, finalKey))
  = final 
  where { 
    istate = State ^ initialKey; 
    rnds = [istate] # [| Round (state, key) 
                      || state <- rnds 
                      || key <- rndKeys |]; 
    final = FinalRound (last rnds, finalKey); 
  }; 

InvRounds (State, (initialKey, rndKeys, finalKey))
  = final 
  where { 
    invRndKeys = [| InvMixColumn k || k <- reverse rndKeys |];
    istate = State ^ finalKey;
    rnds = [istate] # [| InvRound (state, key)
		      || state <- rnds
		      || key <- invRndKeys |];
    final = InvFinalRound (last rnds, initialKey);
  };

last xs = xs @ (width xs - 1);

Round : ([4][Nb][8], [4][Nb][8]) -> [4][Nb][8];
Round (State, RoundKey) = State3 ^ RoundKey 
  where { 
    State1 = ByteSub State; 
    State2 = ShiftRow State1; 
    State3 = MixColumn State2; 
  }; 

FinalRound (State, RoundKey) = State2 ^ RoundKey
  where {
    State1 = ByteSub State;
    State2 = ShiftRow State1;
  };

InvRound (State, RoundKey) = State3 ^ RoundKey
  where {
    State1 = InvByteSub State;
    State2 = InvShiftRow State1;
    State3 = InvMixColumn State2;
  };

InvFinalRound (State, RoundKey) = State2 ^ RoundKey
  where {
    State1 = InvByteSub State;
    State2 = InvShiftRow State1;
  };

ByteSub : [4][Nb][8] -> [4][Nb][8];
ByteSub state =
  [| [| Sbox x || x <- row |] || row <- state |]; 

InvByteSub : {a} [4][a][8] -> [4][a][8];
InvByteSub state =
  [| [| InvSbox x || x <- row |] || row <- state |];

ShiftRow : [4][Nb][8] -> [4][Nb][8]; 
ShiftRow state =
  [| row <<< i
  || row <- state
  || i <- [ 0 .. 3 ] |];

InvShiftRow : [4][Nb][8] -> [4][Nb][8];
InvShiftRow state =
  [| row >>> i
  || row <- state
  || i <- [ 0 .. 3 ] |];

MixColumn : [4][Nb][8] -> [4][Nb][8]; 
MixColumn state =
  transpose [| multCol (cx, col)
            || col <- transpose state
            |];

InvMixColumn : {a} [4][a][8] -> [4][a][8];
InvMixColumn state =
  transpose [| multCol (dx, col)
	    || col <- transpose state
	    |];

multCol (cx, col)
  = join (mmult (cx, split col));

cx = polyMat [ 0x02 0x01 0x01 0x03 ]; 
dx = polyMat [ 0x0e 0x09 0x0d 0x0b ];
 
polyMat coeff =
  transpose (take (4, cols))
  where cols =
          [coeff] #
          [| cs >>> 1 || cs <- cols |]; 

// Key Schedule

keyExpansion : [4*Nk][8] -> [(Nr+1)*Nb][4][8];
keyExpansion key = W
  where {
    keyCols : [Nk][4][8];
    keyCols = split key;
    W = keyCols # [| nextWord (i, old, prev)
                  || i <- [Nk .. ((Nr+1)*Nb-1)]
                  || old <- W
                  || prev <- drop (Nk-1, W)
                  |]; };

nextWord : ([8],[4][8],[4][8]) -> [4][8];
nextWord (i, old, prev) = old ^ prev' 
  where prev' =
    if i % Nk == 0 then
        subByte (prev <<< 1) ^ Rcon (i / Nk)
    else if (Nk > 6) & (i % Nk == 4) then
        subByte prev
    else prev;

subByte p = [| Sbox x || x <- p |];

Rcon i = [(gpower (<| x |>, i - 1)) 0 0 0];

keySchedule : [4*Nk][8] -> ([4][Nb][8], [Nr-1][4][Nb][8], [4][Nb][8]);
keySchedule Key = (rKeys @ 0, rKeys @@ [1 .. (Nr-1)], rKeys @ Nr)
  where {
    W : [(Nr+1)*Nb][4][8];
    W = keyExpansion Key;
    rKeys : [Nr+1][4][Nb][8];
    rKeys = [| transpose ws || ws <- split W |];
  };

// Sbox

Sbox : [8] -> [8];
Sbox x = sbox @ x;
InvSbox : [8] -> [8];
InvSbox x = sibox @ x;

sbox : [256][8];
sbox = [| affine (inverse x) || x <- [0 .. 255] |];
sibox : [256][8];
sibox = [| inverse (invAffine x) || x <- [0 .. 255] |];

affine : [8] -> [8];
affine xs = join (mmultBit (affMat, split xs)) ^ 0x63;
invAffine : [8] -> [8];
invAffine xs = join (mmultBit (invAffMat, split (xs ^ 0x63)));

affMat    = [ 0xf1 ] # [| x <<< 1 || x <- affMat    || i <- [1 .. 7] |];
invAffMat = [ 0xa4 ] # [| x <<< 1 || x <- invAffMat || i <- [1 .. 7] |];

//---------------------------------------------------------
// Galois field 2^8

irred = <| x^8 + x^4 + x^3 + x + 1 |>;

gtimes : ([8], [8]) -> [8];
gtimes (x, y) = pmod (pmult (x, y), irred);

gpower (x, i) = ps @ i
  where ps = [1] # [| gtimes (x, p) || p <- ps |];

inverse x = if x == 0 then 0 else find1 (ys, 0)
  where {
    ys = [| gtimes (x, y) || y <- [0 .. 255] |];
  };

find1 : ([256][8], [8]) -> [8];
find1 (xs, i)
  = if xs @ i == 1 then
	i
    else
	find1 (xs, i + 1);

// Matrix multiplication (in Galois Field 2^8)

mmult : {a b c} ([a][b][8], [b][c][8]) -> [a][c][8];
mmult (xss, yss)
  = [| [| dot (row, col) || col <- transpose yss |] || row <- xss |];

dot (as, bs) = sum [| gtimes (a, b) || a <- as || b <- bs |];

sum xs
  = sums @ width xs
  where sums = [0] # [| x ^ y || x <- xs || y <- sums |];

// Special case for matrix of bits

mmultBit : {a b} ([a][8], [8][b]) -> [a][b];
mmultBit (xss, yss)
  = [| [| dotBit (row, col) || col <- transpose yss |] || row <- xss |];

dotBit : ([8], [8]) -> Bit;
dotBit (as, bs) = parity [| a & b || a <- as || b <- bs |];
