Usage:

    lss [options] BITCODE_FILE

Description:

  The LLVM Symbolic Simulator, lss, interprets a fully-linked LLVM
  bitcode file, but treats certain program variables as arbitrary,
  symbolic expressions rather than concrete values. Therefore, the
  resulting values of certain program variables may be described as
  symbolic expressions in terms of the initial values of symbolic input
  values.

  The symbolic expressions representing the values of particular program
  variables can be stored in the form of And-Inverter Graphs (AIGs) for
  further processing by external tools.

  Example usage: 

  lss --memtype=dagbased --dbug=2 trivial.bc

  will simulate the function main() from the LLVM bitcode file
  'trivial.bc' in the current directory, using the DAG-based memory
  model, and running at a debug level of 2.

Options:

  -d n, --dbug=n
     
      Sets the debug level for the current run:

      1 - Little to no output; the lowest verbosity level.
      2 - Instruction trace only.
      3 - Warnings on symbolic validity results from mem model; Displays
          error paths as they are encountered.  Mem model info for error
          paths.
      4 - Path constraints on nontrivial path merges.
      5 - Simulator internal state (control stack dump per instruction).
      6 - Memory model dump on load/store operations only; complete path
          dumps on nontrivial path merges. Potentially produces a
          /significant/ amount of output.
      7 - Memory model dump pre/post every operation.  Potentially
          produces a /significant/ amount of output.

  -a ARGS, --argv=ARGS
    
      Specify the space-delimited list of arguments to pass as argv
      to the main() function.

  -m MEMTYPE, --memtype=MEMTYPE

      where MEMTYPE is one of 'bitblast' or 'dagbased'.  Selects the
      memory model to use for the current run.  Each MEMTYPE has a
      distinct feature profile and represents various implementation
      tradeoffs (e.g., 'bitblast' is in general more efficient, but
      symbolic lengths are only supported by 'dagbased'.)

  -e, --errpaths

      Indicates that, upon program completion, details should be
      displayed about any paths on which errors occurred.  Potentially
      verbose.

  -x, --xlate

      Displays to stdout the LLVM-Sym translation of the input LLVM
      bitcode, and then terminates.  Viewing this representation is
      useful when interpreting path location information provided in
      various debug modes; also when reasoning about the behavior of
      programs operating on symbolic inputs.

  -?, --help

      Print a help message.

  -V, --version

      Print out the version of the simulator.
