module LLVM where 

import Prelude;

data LLVMType :: sort 0 where {
    -- Primitive types that we support.
    IntType :: (n :: Nat) -> LLVMType;
    FloatType  :: LLVMType;
    DoubleType :: LLVMType;
    -- | Nat is the width of the pointer in bytes.
    PtrType :: Nat -> LLVMType;
    -- Type for arrays.
    ArrayType :: (n :: Nat) -> LLVMType -> LLVMType;
    -- Type for structs.  The vector contains the type of each field, followed
    -- by the amount of padding to add after the field.
    StructType :: (n :: Nat) -> Vec n #(LLVMType,Nat) -> LLVMType;

    VectorType :: (n :: Nat) -> LLVMType -> LLVMType;
  }

fieldType :: sort 0;
fieldType = #(LLVMType,Nat); 

emptyFields :: Vec 0 fieldType;
emptyFields = EmptyVec fieldType;

consFieldType :: fieldType -> (n::Nat) -> Vec n fieldType -> Vec (Succ n) fieldType;
consFieldType tp n r = ConsVec fieldType tp n r;

-- | Recuresive data struture for storing fields.
data StructValue :: (n :: Nat) -> Vec n fieldType -> sort 0 where {
    EmptyStruct :: StructValue 0 (EmptyVec fieldType);
    ConsStruct :: (tp :: LLVMType) 
               -> (padding :: Nat)
               -> (n :: Nat)
               -> (r :: Vec n fieldType)
               -> value tp
               -> StructValue n r
               -> StructValue (Succ n) (ConsVec fieldType (tp,padding) n r);
  }

snocVec :: (e :: sort 0) -> (n::Nat) -> Vec n e -> e -> Vec (Succ n) e;

snocStruct :: (n :: Nat)
           -> (tps :: Vec n fieldType)
           -> StructValue n tps
           -> (tp :: LLVMType)
           -> value tp
           -> (padding :: Nat)
           -> StructValue (Succ n) (snocVec fieldType n tps (tp,padding));

value :: LLVMType -> sort 0;
value (IntType w) = bitvector w;
value FloatType   = Float;
value DoubleType  = Double;
value (PtrType n)   = bitvector (mulNat 8 n);
value (ArrayType n tp) = Vec n (value tp);
value (StructType n tps) = StructValue n tps;
value (VectorType n tp) = Vec n (value tp);

binFn :: sort 0 -> sort 0;
binFn tp = tp -> tp -> tp;

-- | Returns value in intege value as a natural number less than 2^w.
llvmIntValueNat :: (w :: Nat) -> bitvector w -> Nat;

llvmIntConstant :: (w :: Nat) -> Nat -> bitvector w;

llvmNullPtr :: (c :: Nat) -> value (PtrType c);

-- | Return true if first bitvector is a multiple of the other when
-- considered as an unsigned integer.
isAligned :: (w :: Nat) -> bitvector w -> bitvector 32 -> Bool;

llvmAdd  :: (w :: Nat) -> binFn (bitvector w);
llvmAddV :: (n w :: Nat) -> binFn (Vec n (bitvector w));

llvmSub  :: (w :: Nat) -> binFn (value (IntType w));
llvmSubV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmMul  :: (w :: Nat) -> binFn (value (IntType w));
llvmMulV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmUDiv  :: (w :: Nat) -> binFn (value (IntType w));
llvmUDivV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmSDiv  :: (w :: Nat) -> binFn (value (IntType w));
llvmSDivV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmURem  :: (w :: Nat) -> binFn (value (IntType w));
llvmURemV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmSRem  :: (w :: Nat)   -> binFn (value (IntType w));
llvmSRemV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmShl  :: (w :: Nat)   -> binFn (value (IntType w));
llvmShlV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmLShr  :: (w :: Nat)   -> binFn (value (IntType w));
llvmLShrV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmAShr  :: (w :: Nat)   -> binFn (value (IntType w));
llvmAShrV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmAnd  :: (w :: Nat)   -> binFn (value (IntType w));
llvmAndV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmOr   :: (w :: Nat)   -> binFn (value (IntType w));
llvmOrV  :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmXor  :: (w :: Nat)   -> binFn (value (IntType w));
llvmXorV :: (n w :: Nat) -> binFn (value (VectorType n (IntType w)));

llvmAddPtr :: (b :: Nat) -> binFn (value (PtrType b));

arithmeticWithOverflowResult :: Nat -> Nat -> Nat -> LLVMType;
arithmeticWithOverflowResult w p1 p2 =
  StructType 2 (consFieldType (IntType 1,p1) 1
               (consFieldType (IntType w,p2) 0 emptyFields));

llvmAddWithOverflow :: (w p1 p2 :: Nat)
                    -> value (IntType w)
                    -> value (IntType w)
                    -> value (arithmeticWithOverflowResult w p1 p2);

binRel :: sort 0 -> sort 0;
binRel tp = tp -> tp -> bitvector 1;

llvmIeq   :: (w :: Nat)   -> binRel (bitvector w);
llvmIeqV  :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIne   :: (w :: Nat)   -> binRel (bitvector w);
llvmIneV  :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIugt  :: (w :: Nat)   -> binRel (bitvector w);
llvmIugtV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIuge  :: (w :: Nat)   -> binRel (bitvector w);
llvmIugeV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIult  :: (w :: Nat)   -> binRel (bitvector w);
llvmIultV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIule  :: (w :: Nat)   -> binRel (bitvector w);
llvmIuleV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIsgt  :: (w :: Nat)   -> binRel (bitvector w);
llvmIsgtV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIsge  :: (w :: Nat)   -> binRel (bitvector w);
llvmIsgeV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIslt  :: (w :: Nat)   -> binRel (bitvector w);
llvmIsltV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmIsle  :: (w :: Nat)   -> binRel (bitvector w);
llvmIsleV :: (n w :: Nat) -> binRel (Vec n (bitvector w));

llvmTrunc :: (d r :: Nat) -> bitvector (addNat r d) -> bitvector r;
llvmTrunc = bvTrunc;
llvmTruncV :: (n d r :: Nat)
           -> Vec n (bitvector (addNat r d))
           -> Vec n (bitvector r);

llvmZExt  :: (d i :: Nat)   -> bitvector i -> bitvector (addNat i d);
llvmZExtV :: (n d i :: Nat) -> bitvector i -> bitvector (addNat i d);

llvmSExt  :: (d i :: Nat)   -> bitvector i -> bitvector (addNat i d);
llvmSExtV :: (n d i :: Nat) -> bitvector i -> bitvector (addNat i d);

llvmSelect  :: (tp :: LLVMType) -> bitvector 1 -> value tp -> value tp -> value tp;
llvmSelectV :: (n :: Nat)
            -> (tp :: LLVMType)
            -> Vec n (bitvector 1)
            -> Vec n (value tp)
            -> Vec n (value tp)
            -> Vec n (value tp);

llvmStructElt :: (n :: Nat)
              -> (tps :: Vec n fieldType)
              -> StructValue n tps
              -> (i :: Fin n)
              -> value (fst LLVMType Nat (get n fieldType tps i));

llvmArrayElt :: (n :: Nat)
             -> (tp :: LLVMType)
             -> Vec n (value tp)
             -> Fin n
             -> value tp;

-- | Append the one bitvector to another.  The first vector is the most significant.
llvmAppendInt :: (u v :: Nat)
              -> bitvector u
              -> bitvector v
              -> bitvector (addNat u v);

-- | @llvmIntSlice i n o v@ returns an @n@-bit bitvector equal to v / 2^i.
llvmIntSlice :: (i n o :: Nat) -> bitvector (addNat (addNat i n) o) -> bitvector n;
llvmIntSlice i n o a = vDrop Bool i n (vTake Bool (addNat i n) o a); 

llvmIntToFloat  :: bitvector 32 -> Float;
llvmFloatToInt  :: Float -> bitvector 32;

llvmIntToDouble :: bitvector 64 -> Float;
llvmDoubleToInt :: Float -> bitvector 64;
